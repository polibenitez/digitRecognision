load("~/Documents/BathMeetUp/digit recognision/train.csv")
load("train.csv")
load("~/Documents/BathMeetUp/digit recognision/train.csv")
load("~/Documents/BathMeetUp/digit recognision/train.csv")
source("~/Documents/BathMeetUp/digit recognision/train.csv")
install.packages(c("colorspace", "digest", "munsell", "pkgKitten", "plyr", "Rcpp", "reshape2", "scales", "stringi", "stringr"), lib="/usr/lib/R/site-library")
install.packages(c("mgcv", "survival"), lib="/usr/lib/R/library")
install.packages("mgcv", lib="/usr/lib/R/library")
source("~/Documents/BathMeetUp/digit recognision/train.csv")
source("~/Documents/BathMeetUp/train.csv")
install.packages(c("Rcpp", "readr"))
install.packages(c("Rcpp", "readr"))
install.packages(c("Rcpp", "readr"))
install.packages(c("Rcpp", "readr"))
install.packages(c("Rcpp", "readr"))
install.packages(c("Rcpp", "readr"))
library(readr)
train <- read_csv("~/Documents/BathMeetUp/digit recognision/train.csv")
View(train)
img <- matrix(imgvec, sqrt)
train <- read.csv("train.csv")
visualise <- function(imgvec) {
n <- length(imgvec)
img <- matrix(imgvec, sqrt)
imgmelt <- melt(img)
ggplot(imgmelt, aes(x= Var1, y = Var2, fill = value)) + geom_raster() + scale_fill_gradient(low - "white", high = "black")
}
visualise <- function(imgvec) {
n <- length(imgvec)
img <- matrix(imgvec, sqrt)
imgmelt <- melt(img)
ggplot(imgmelt, aes(x= Var1, y = Var2, fill = value)) + geom_raster() + scale_fill_gradient(low - "white", high = "black")
}
train <- read.csv("train.csv")
train <- as.matrix(train)
train <- train[sample(1:42000), ]
labels <- train[,1]
train <- train[,-1]
labels[labels == 0] <- 10
train <- train/max(train)
Xtrain <-train[1:25200, ]
Ytrain <- labels[1:25200]
Xval <- train[25201:33600, ]
Yval <- labels[25201:33600]
Xtest <- train[33601:42000, ]
Ytest <- labels[33601:4200]
visualise <- function(imgvec) {
n <- length(imgvec)
img <- matrix(imgvec, sqrt)
imgmelt <- melt(img)
ggplot(imgmelt, aes(x= Var1, y = Var2, fill = value)) + geom_raster() + scale_fill_gradient(low - "white", high = "black")
}
hidden_size <- 25
n1 <- 785 * hidden_size
n2 <- (hidden_size +1) * 10
init_params <- runif((n1+ n2), min = -0.1, max = 0.1)
make_thetas(init_params)
make_thetas <- function(params) {
thetas <- vetor("list", lenght = 2)
thetas[[1]] <- matrix(params[1:n1], ncol = 785)
thetas[[2]] <- matrix(params[(n1 + 1):(n1 + n2)], nrow = 10)
thetas
}
make_thetas(init_params)
visualise(train[9, ])
visualise(train[9,0])
View(make_thetas)
thetas <- make_thetas(params)
source('~/Documents/BathMeetUp/script.R', echo=TRUE)
make_thetas(init_params)
View(make_thetas)
visualise(train[9,1])
visualise(train[],9)
visualise(train[9,],9)
sigmoid <- function(z) {
1 / (1 + exp(-z))
}
curve(sigmoid, from = -10, to = 10)
predict <- function (params, X) {
thetas <- make_thetas(params)
Theta1 <- thetas[[1]]
Theta2 <- thetas[[2]]
m <- nrow(X)
A1 <- cbind(rep(1,m),X)
Z2 <- A1 %*% t(Theta1)
A2 <- cbind(rep(1,m),sigmoid(Z2))
Z3 <- A2 %*% t(Theta2)
A3 <- sigmoid(Z3)
max.col(A3)
}
preds <- predict(init_params, Xval)
preds <- predict(init_params, Xval)
preds <- predict(init_params, Xval)
mean(preds == Yval)
preds <- predict(init_params, Xval)
preds <- predict(init_params, Xval)
make_thetas <- function(params) {
thetas <- vetor("list", lenght = 2)
thetas[[1]] <- matrix(params[1:n1], ncol = 785)
thetas[[2]] <- matrix(params[(n1 + 1):(n1 + n2)], nrow = 10)
thetas
}
preds <- predict(init_params, Xval)
preds <- predict(init_params, Xval)
make_thetas <- function(params) {
thetas <- vector("list", lenght = 2)
thetas[[1]] <- matrix(params[1:n1], ncol = 785)
thetas[[2]] <- matrix(params[(n1 + 1):(n1 + n2)], nrow = 10)
thetas
}
preds <- predict(init_params, Xval)
source('~/Documents/BathMeetUp/script.R', echo=TRUE)
make_thetas <- function(params) {
thetas <- vector("list", length = 2)
thetas[[1]] <- matrix(params[1:n1], ncol = 785)
thetas[[2]] <- matrix(params[(n1 + 1):(n1 + n2)], nrow = 10)
thetas
}
preds <- predict(init_params, Xval)
mean(preds == Yval)
visualise(train[9,],0)
compute_grad <- function(params, X, y, ) {
thetas <- make_thetas(params)
Theta1 <- thetas[[1]]
Theta2 <- thetas[[2]]
m <- nrow(X)
A1 <- cbind(rep(1,m),X)
Z2 <- A1 %*% t(Theta1)
A2 <- cbind(rep(1,m),sigmoid(Z2))
Z3 <- A2 %*% t(Theta2)
A3 <- sigmoid(Z3)
#Matriz identidad
Actual <- diag(10)[y, ]
Delta3 <- A3 - Actual
Delta2 <- (Delta3 %*% Theta2[, -1]) * sigmoid(Z2) * (1 - sigmoid(Z2))
Theta1_grad <- (t(Delta2) %*% A1) /m
Theta2_grad <- (t(Delta3) %*% A2) /m
Reg1 <- lambda/m * Theta1
Reg2 <- lambda/m * Theta2
Reg1[, 1] <- 0
Reg2[, 1] <- 0
Theta1_grad <- Theta1_grad + Reg1
Theta2_grad <- Theta2_grad + Reg2
c(as.vector(Theta1_grad), as.vector(Theta2_grad))
}
compute_grad <- function(params, X, y, lambda) {
thetas <- make_thetas(params)
Theta1 <- thetas[[1]]
Theta2 <- thetas[[2]]
m <- nrow(X)
A1 <- cbind(rep(1,m),X)
Z2 <- A1 %*% t(Theta1)
A2 <- cbind(rep(1,m),sigmoid(Z2))
Z3 <- A2 %*% t(Theta2)
A3 <- sigmoid(Z3)
#Matriz identidad
Actual <- diag(10)[y, ]
Delta3 <- A3 - Actual
Delta2 <- (Delta3 %*% Theta2[, -1]) * sigmoid(Z2) * (1 - sigmoid(Z2))
Theta1_grad <- (t(Delta2) %*% A1) /m
Theta2_grad <- (t(Delta3) %*% A2) /m
Reg1 <- lambda/m * Theta1
Reg2 <- lambda/m * Theta2
Reg1[, 1] <- 0
Reg2[, 1] <- 0
Theta1_grad <- Theta1_grad + Reg1
Theta2_grad <- Theta2_grad + Reg2
c(as.vector(Theta1_grad), as.vector(Theta2_grad))
}
optim_out <- optim(init_params,
function(p) compute_cost(p,Xtrain, Ytrain, lambda),
function(p) compute_grad(p,Xtrain, Ytrain, lambda),
method = "L-BFGS-B",
control = list(maxit = 20))
compute_cost <- function(params, X, y, lambda){
thetas <- make_thetas(params)
Theta1 <- thetas[[1]]
Theta2 <- thetas[[2]]
m <- nrow(X)
A1 <- cbind(rep(1,m),X)
Z2 <- A1 %*% t(Theta1)
A2 <- cbind(rep(1,m),sigmoid(Z2))
Z3 <- A2 %*% t(Theta2)
A3 <- sigmoid(Z3)
#Matriz identidad
Actual <- diag(10)[y, ]
J <- sum(-log(A3)* Actual + -log(1-A3) * (1-Actual)) / m
J <- J + lambda(sum(Theta1[, -1] ^ 2) + sum(Theta2[, -1] ^2)) / (2*m)
J
}
optim_out <- optim(init_params,
function(p) compute_cost(p,Xtrain, Ytrain, lambda),
function(p) compute_grad(p,Xtrain, Ytrain, lambda),
method = "L-BFGS-B",
control = list(maxit = 20))
lambda <- 1
optim_out <- optim(init_params,
function(p) compute_cost(p,Xtrain, Ytrain, lambda),
function(p) compute_grad(p,Xtrain, Ytrain, lambda),
method = "L-BFGS-B",
control = list(maxit = 20))
source('~/Documents/BathMeetUp/script.R', echo=TRUE)
source('~/Documents/BathMeetUp/script.R', echo=TRUE)
source('~/Documents/BathMeetUp/script.R', echo=TRUE)
savehistory("~/Documents/BathMeetUp/History.Rhistory")
